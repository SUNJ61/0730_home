[암시적 형변환] -> 데이터를 잃어버리지 않는 특수한 구문.
int n1 = 1234;
 long n2 = n1;
4바이트인 int형 변수를 8바이트인 long형 변수로 할당, 문제가 생기지 않음.
하지만 큰 자료형 (long)변수가 작은 자료형 (int)변수에 할당 되는경우 문제 발생.
-> 오버플로우 현상이 일어날 수 있음. -> 초과 하는 데이터를 잃어버릴 수 있다.

[명시적 형변환]
때문에 큰 자료형 변수가 작은 자료형 변수에 할당 될 때는 캐스팅 작업이 필요.
double dn = 33.75678d;
int num = (int)dn;
->(자료형)변수 형태로 사용할 수 있다.

[형식 변환]
형식 변환 관련 메소드로 convert가 있다.
d = 12.34;
string s = "";
s = Convert.ToString(d);
WriteLine("형식 변환 = " + s);
다음과 같은 코드로 string의 d값을 그대로 문자열로 변환할 수 있다.

[데이터 형식]
1. 기본데이터 형식
-숫자 : 정수, 실수
-문자 : 문자, 문자열
2. 복합데이터 형식
-클래스
-배열
-구조체

#데이터 형식은 기본데이터 형식과 복합데이터 형식으로 분류하는 동시에
 값 형식과 참조형식으로 분류한다.

-값형식 : 변수가 값을 담는 데이터 형식을 말한다.
            스택만 존재하기 때문에 중괄호를 빠면 데이터가 사라진다. (메모리 삭제.)
-참조형식 : 변수가 값대신에 값이 있는 위치(주소를 참조)를 담는 형식.
               스택과 힙이 존재하여 스텍에는 주소가 저장되고, 값은 힙에 저장이 되서
               중괄호를 빠져 나가도 값이 그대로 유지된다. (스택은 초기화.)
               힙은 메모리를 할당 하면 가비지 컬렉터가 관리한다.
               (메모리를 사용하지 않으면 데이터를 수거해간다.)

2진수 -> 8진수 : 3자리 씩 끊어서 계산 ex) 010101 -> 010 101 -> 25
2진수 -> 16진수 : 4자리 씩 끊어서 계산 ex) 10011111 -> 1001 1111 -> 9F

[var - 암시적으로 형식화된 로컬 변수]
var : 받은 데이터 값을 자동으로 추론하여 적당한 형식으로 변환한다.
->*object와는 다르다, object는 모든 자료형의 조상이라 어떤 데이터든 담지만
    var는 대입된 데이터에 값에 따라 적절한 형식을 추론하여 적용시킨다.
->*var는 값 형식으로 받지만 object는 참조 형식으로 받고 기본데이터형 뿐만 아니라
    복합 데이터형식(클래스, 배열)으로도 받는다.
->*object는 박싱 언박싱이 일어나서 var보다 느리다. 이 때문에 대규모 프로젝트에서는
    var를 선언하고 var는 클래스 생성자에서 쓸 수 없기 때문에 매소드 안에 지역변수로 많이 사용한다.

=> 생성자에서는 var를 쓰면 안된다.