[C#]=============================================================================
복합데이터 (사용자 정의 자료형) -> 사용자가 만드는 자료형
 -클래스 -> 접근 제한 지시자가 있어서 외부 접근 제한 유무를 정할 수 있음. 보안이 용이 => 참조형 데이터이다.
 -구조체 -> 대부분 public으로 선언되어 외부에서 접근할 수 있다. 클래스와 비슷하다.=> 값 데이터이다.
         *접근 제한 지시자 :  public private protected 

  공통점 : 관련된 데이터나 매서드를 묶어서 쓸 수 있다.


로컬함수 : 매서드 내에서만 사용되는 또 다른 함수
>클래스의 멤버가 아니기 때문에 메서드가 아니라 함수라고 부른다.
>매서드 밖에서 다시 사용할 일 없는 반복적인 작업을 하나의 이름으로 묶어놓을때 적합.

내장형 구조체
>DateTime 구조체 - 시간 날짜관련 정보 제공
>TimeSpan 구조체 - 시간 날짜 간격에 대한 정보제공
>Char 구조체
>Guid구조체
==============================================================================
[유니티 용어]





[유니티 제작]
[preview]========================================================================
1. Scene 이동과 ui다루기

2. 재장전 애니메이션

3. 총기 교체

==============================================================================

1.

Scene을 복사하는 것은 같은 맵을 2개 생성한거와 같다. (다른이름으로 저장한 것)
  ->거대한 맵 단위가 바뀌는 경우가 대부분, Scene이 변경된 것이다.
  ->gameobject탭에 align with view를 하면 사용자 위치로 오브젝트를 이동시킨다.
     이를 이용하여 게임 화면과 사용자가 설정한 구도와 같게 한다. 
  ->game 화면에 3번째 탭은 사용자가 볼 해상도를 결정 할 수 있다.
    (game은 full-hd, 영상은 qhd가 권장된다. 16:9 안드로이드?, 16:10 애플 기준?)

ui 만들기
-제목 만들기
  ->마우스 우클릭하여 ui탭에 canvas를 만든다. (자동으로 이벤트 시스템이 생김 -> 손가락터치나 마우스클릭에 반응하도록함.)
  ->만든 canvas오브젝트에 우클릭하여 UI->panel을 만든다.
  ->해당 판넬의 모양을 탑(세로) - 센터(가로)로 만든다
  ->크기와 높이를 조절한다.
  ->포지션을 통해 해당 ui를 이동시킨다.
  ->UI에 적용시킬 이미지의 텍스쳐 타입을 sprite 2D and UI로 바꾼다.
  ->어드밴스에 모니터 모양탭에 오버라이드를 체크한다. (pc에 최적화하는것) / apply반드시 누를것
  ->만든 이미지를 판낼의 소스 이미지에 넣는다.
  (판넬 더블클릭하고 2번 혹은 탭에 3d를 2d로 바꾸면 평면으로 바꿀 수 있다.)
  ->컬러에서 투명도를 255로 올리면 매우 선명해짐.

-제목밑에 버튼 만들기
  ->제목 오브젝트(판넬)에 ui - 레거시 - 버튼을 클릭
  ->위치조정, 버튼 아래에 텍스터 오브젝트 삭제
  ->제목과 똑같이 넣을 이미지 설정하기
  ->버튼에 이미지 적용하고, 이미지 타입을 타일로 설정한다. (계속해서 이미지를 반복함)
  ->알맞게 버튼 크기와 위치를 조절한다.
-버튼 누르면 씬이동하기
  ->파일에 빌드세팅들어가서 만든 씬을 넣는다. (뜨게할 순서대로)
  ->이동 관리할 빈 오브젝트 만들기
  ->이동 관리할 스크립트 만들고 관리 오브젝트에 적용시키기
  ->플레이 누르면 씬 이동 코딩하기
using UnityEngine.SceneManagement; //씬 관련 기능을 사용하겠다. ScenManagement 생략을 명시

public void PlayGame()
{
    SceneManager.LoadScene("PlayScene");
}
  ->play버튼에 버튼 컴퍼넌트에 on click에 +버튼을 누른후 관리 오브젝트를 넣는다. 펑션에서 만든 실행 스크립트를 설정한다.

  ->quit 누르면 작동 종료하기
    public void QuitGame()
    {
#if UNITY_EDITOR //전처리기 (컴파일전 미리 기능이 정해져 있음.)
        UnityEditor.EditorApplication.isPlaying = false; //유니티에서 편집중인 상태에서 종료
#else //빌드에서 종료
        Application.Quit();
#endif
    }
  ->quit버튼에 버튼 컴퍼넌트에 위와 같이 넣는다.

2. 재장전 애니매이션 만들기

  ->플레이어 오브젝트에 이미 에셋이 준비 완료됨, 스크립트만 수정하면 된다.
  ->코딩하기

(추가)
public int bulletCount = 0;
bool isRelaod = false;

(수정) -> 업데이트 함수 안
if (handCtrl.isRun == false && isRelaod == false)       
        Fire();

(수정) -> 파이어 함수 안
++bulletCount;

Invoke("MuzzleFlashDisable", 0.03f); //이걸 추가하면 업데이트안 총구화염 멈추기 기능 없애도 된다.
//       "매서드 명"         시간   => 원하는 시간간격 만큼 매서드를 호출 (0.03초마다 호출)

if(bulletCount == 10)
{
    StartCoroutine(Reload()); //게임중 개발자가 원하는 프레임을 만들려고 할 때 사용
    // 아래 IEnumerator Reload()를 호출한다.
}

(추가) 업데이트 함수 내

IEnumerator Reload()
{
    isReload = true;
    fireAni.Play("pump3"); //리로드 애니메이션 재생
    yield return new WaitForSeconds(0.8f); //0.5초 후에 다음 반환 값으로 넘긴다. (0.5초후 다음 코드실행)
    bulletCount = 0;
    isReload = false;
}
void MuzzleFlashDisable()
{
    muzzleFlash.Stop();
}

3. 총기 교체 (유니티에서 for, foreach문을 써야함)
  #총기 모델의 확장자는 FBX여야 한다. OBJ는 적용이 안됨

  ->총기 모델을 컴뱃 sg플레이어 밑  spas13에 넣는다.
  ->기존의 산탄총인 SPAS12의 메쉬를 체크해제한다.
  ->장착한 총기도 메쉬랜더를 해제한다.
  -> 기존의 모델과 새로운 모델의 위치를 다 맞춘 후 처음 손에 들 총만 메쉬를 킨다.
  ->새로운 스크립트를 만들어 fps컨트롤러에 넣는다.
  ->코딩한다.

(선언한다.)
public SkinnedMeshRenderer spas12;
public MeshRenderer[] Ak47; //ak와 m4는 메쉬랜더가 다수이므로 배열 선언
public MeshRenderer[] M4A1;

(업데이트 함수 안)
if(Input.GetKeyDown(KeyCode.Alpha1)) //Alpha1 = 키보드 위쪽 숫자 1이다.
{
    for(int i = 0; i < Ak47.Length; i++) // ak의 매쉬를 활성화 시킨다.
        Ak47[i].enabled = true; //위에서 AK47은 매쉬정보를 저장한 변수로 선언되어 조절하면 매쉬 컨트롤.
    for(int i = 0; i < M4A1.Length; i++) // m4의 매쉬를 비활성화 시킨다.
        M4A1[i].enabled = false;
    spas12.enabled = false; //샷건의 매쉬를 비활성화 시킨다.
}
else if(Input.GetKeyDown(KeyCode.Alpha2))
{
    for (int i = 0; i < Ak47.Length; i++)
        Ak47[i].enabled = false;
    for (int i = 0; i < M4A1.Length; i++)
        M4A1[i].enabled = true;
    spas12.enabled = false;
}
else if(Input.GetKeyDown(KeyCode.Alpha3))
{
    for (int i = 0; i < Ak47.Length; i++)
        Ak47[i].enabled = false;
    for (int i = 0; i < M4A1.Length; i++)
        M4A1[i].enabled = false;
    spas12.enabled = true;
}

 -총기 변경 애니메이션 넣기

  ->스크립트에 애니매이션 퍼블릭을 추가하고 컴벳sg플레이어를 넣는다.
  ->스크립트에서 각 if문 안에 애니메이션 출력인 ComBatSg.Play("draw");를 넣는다. 
 