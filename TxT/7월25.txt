
===================================================================================
오늘할 것

유니티에서 delegate event사용방법
유니티에서 싱글게임에서 데이터를 저장하는방법
예를 들어 킬수가 5였다면 유니티를 다시 껏다가 다시켜도 그전 킬수를 기록하여 저장되어야 한다.
인벤토리와 더불어 데이터 저장이 되는지
수업 네트워크 게임은 데이터가 네트워크를 하기위한 서버에 저장되지만
싱글게임인 경우에서 해당 컴퓨터의 파일로 기록된다.
이방법을 공부해서 적용시켜보기.


1. 적 웨이포인트를 랜덤으로 뽑기.

2. 드럼통이 터졌을 때 범위안에 있으면 적 사망하기.

3. 플레이어가 죽었을 때 모든 적을 배열에 담아 for문으로 비활성화를 효율적으로 고치기.

4. 킬스코어 만들기
   -> 배럴에 죽었을 때 스코어 여러번 호출이 되는 문제 해결하기.
   -> 이전에 했던 킬카운드가 저장되어 이어서 킬카운트가 늘어나는 기능제작.

5. 서바이벌 아일랜드에서 적 오브젝트 풀링하기
   배럴 5개 넣어서 배럴이 소환될 때 랜덤하게 색상이 바뀌도록 만들기
   배럴이 총알 5발을 맞으면 폭파
   반경 20안에 있는 적들은 사망하도록 한다. 
===================================================================================

1.  ai무브먼트 관리하는 곳에서 웨이포인트 스크립트 수정
    랜덤으로 인덱스 뽑기

2. 배럴 스크립트에서 수정

3.플레이어가 죽었을 때 모든 적을 배열에 담아 for문으로 비활성화를 효율적으로 고치기.
  ->적이 많아지면 for문으로 전부 비활성화 하는것은 오래걸리며, 비효율적이다.
  ->delegate를 사용하여 끈다.

4. 킬스코어 만들기 
  -배럴에 죽었을 때 스코어 여러번 호출이 되는 문제 해결하기.
   ->if(isDie) return; 을 이용하여 한번만 호출되게 하기.

  -이전에 했던 킬카운드가 저장되어 이어서 킬카운트가 늘어나는 기능제작.
===================================================================================
다음에 할 것

인벤토리와 연동해서 데이터를 컴퓨터 하드 디스크에 저장파일로 저장하는 기능을 만든다.
위에 내용은 싱글게임이 유행할 때 많이 쓰였으나 요즘 네트워크 게임에서는 잘쓰이지 않는다.
===================================================================================
C#

Delegate : 대리자 (클래스안,클래스 밖에 선언해도 된다. 클래스 안 : 지역에서 사용, 클래스 밖 : 전역으로 사용)
컴퓨터에 어떤 사건이 일어나면 그 사건에 반응하는 프로그램을 만들어 본다.

대리자 : 어떤 조건의 명령을 실행하고 싶을 때 대리자에게 해당 명령을 미리 전달해 두고 조건이 만족하면 
           명령을 대신 실행해준다.
           ->선언 방법 : delegate int MyDelegate(int a, int b); //반환형이 int이며 대신하여 매개변수 2개를 받는 대리자.
           ->사용 방법 : MyDelegate Callback;  Callback = new MyDelegate(a.Plus); //할당및, 대리할 함수 설정.

###대리자는 프로그래밍에서 코드 자체를 매개변수로 넘기고 싶을 때 많이 사용한다.
          
대리자 체인 : 대리자 하나가 여러개의 메소드를 동시에 참조할 수 있다.
익명 메소드 : 한번 쓰고 버릴 기능들을 익명의 함수로 처리하여 사용한다.
                 대리자에 직접 함수를 작성해 넣음으로써 사용.

이벤트
 -event를 붙이면 EventHandler대리자를 받아서 클래스 안에서 한정 사용하겠다. 즉, SomethingHappend는 외부 사용 불가.
 -이벤트는 대리자에 envent 키워드로 수식해서 선언한 것이다.
 -이벤트가 대리자와 크게 다른점은 바로 이벤트를 외부에서 직접 사용할 수 없다는 것에 있다.
 -이벤트는 public으로 선언되어도 자신이 선언한 클래스 외부에서는 호출이 불가능하다.
 -반면 event로 선언이 되지 않은 대리자는 public으로 선언되어 있으면 클래스 외부에서도 호출이 가능하다.          