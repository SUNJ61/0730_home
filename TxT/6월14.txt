using System.Random -> 랜덤 변수 생성기능.
        ㄴclass ㄴ메서드
=> .NET Framwork에서 시스템 클래스에서 Random 메서드(함수)를 가지고 온다.

자리표시자 방식은 두개이다.
->WriteLine("30 : {0}, 40 : {1}",30,40);
->WriteLine($"30 : {30}, 40 : {40}");

=========================================================================================================

자료형 - int, string, bool, double, object

int는 4byte의 메모리 공간을 할당하고 정수를 저장하기 위해 사용한다.
double은 8byte의 메모리 공간을 할당하고 실수를 저장하기 위해 사용한다.
string은 문자열을 저장하기 위해 사용하고 용량이 정해져있지 않아 용량이 가변으로 변한다.
bool은 논리값을 저장하기 위해 사용한다. *!는 논리값에서 역(NOT)을 의미한다.
object는 C#에서 사용할 수 있는 모든 형태의 데이터을 담을 수 있는 자료형이다.
->object는 모든 데이터 자료형의 조상이다. (int, bool 등등 모든 자료형을 포함하고 있음.)
->object는 값 형식이 아니라 참조 형식이다. (값에 주소를 가지고있는 자료형. 값은 다른 공간에 저장되어 있음. -> 선언한 함수가 끝나도 값은 계속 남아 있음.)
->object를 자주 쓰지 않는 이유는 박싱과 언박싱이 일어날 수 있기 때문이다.
->object와 다른 자료형은 연산이 되지 않는다.

박싱 : object b = (object)a; -> 박싱이 일어난다. -> a에 담긴 값을 다른공간(힙)에 저장하고 그 주소값을 가진다.
언박싱 : int c = (int)b; -> 언박싱이 일어난다. -> b에 담긴 값을 언박싱해서 선언한 공간(스택)에 저장한다.
#스택은 함수가 끝나면 초기화, 힙은 함수가 끝나도 값을 계속 가지고 있음.

========================================================================================================= 

변수는 계속 변할수 있음. (선언할 때는 가독성이 좋게 하는 것이 좋다.)
상수(constant)는 변하지 않는 값이다. [상수를 선언할 때는 대문자로 선언하는것이 관례이다.]
->상수는 값을 변경하여 다시 선언하면 오류발생함.
->상수는 선언과 동시에 초기화를 해야한다.

변수는 대체로 선언과 초기화를 같이함. (넣을 값이 없으면 0을 넣는다.)

#region [이름] 과 #endregion ->  사이의 코드를 하나로 묶어줌. 

=========================================================================================================

*static void Main(string[] args) -> 프로그램의 시작점. 여러개의 문자열을 입력 받을 수 있다.

리터럴 : 변수에 정수 또는 문자열 값을 저장이 가능한데, 이 값 자체를 리터럴이라고 부른다. (변수에 삽입되지 않은 값. 이를 리터럴 상수라 한다.)