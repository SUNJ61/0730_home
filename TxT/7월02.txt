==============================================================================
[유니티 기타지식]

##무기 발사 방식과 충돌 감지 방식
##projectile movement : 오브젝트에 콜라이더와 리깃바디를 적용하여 충돌을 감지하는 방식
                                ->물리력과 출동 시뮬레이션이 발생
##raycast : 광선을 발사하는 방식 (물리력과 충돌 시뮬레이션을 발생시키려면 스크립트에서 코드 작성 필요.)
               -> 물리력, 충돌 시뮬레이션이 발생하지 않음.

##충돌 감지는 태그와 레이어로 할 수 있다. (레이어가 좀더 빠름)
##레이어로 충돌감지 할때는 리깃바디의 콜리젼 디텍션을 컨티뉴로 해야함, 태그로 감지할때는 discrete로 한다.

##싱글톤 기법 : 다른 클래스가 접근할 때 static변수를 만든후 이 변수가 대표해서 해당 클래스에 접근하도록 한다.
                    이것은 무분별한 객체 생성을 막고 하나만 생성하게 하는 기법이다.

[preview]========================================================================
1. 스켈레톤에 검휘두르는 소리 넣기

2. 크로스헤어 제작
  -크로스헤어 넣기
  -크로스헤어로 적을 겨누었을 때 조준점이 커지면서 빨간색으로 변경

3. 3종류의 적들을 랜덤으로 소환하기

4. 킬카운트 만들기.
[제작]===========================================================================

1. 스켈레톤에 검휘두르는 소리 넣기.

  -스켈레톤에 오디오소스 추가, 스크립트에 오디오소스, 오디오클립 추가
  -검소리를 오디오소스 클립에 추가
  -스크립트 수정

(함수추가)
public void Sword_Sfx()
{
    audioSource.clip = swordclip;
    audioSource.Play();
    //audioSource.PlayDelayed(0.4f); //소리 재생에 딜레이를 주는 함수
}

2.크로스헤어 제작

  -크로스헤어 이미지 타입 sprit으로 변경, 윈도우 최적화 체크
  -이전 UI제작한 오브젝트안에 새로운 이미지 오브젝트 생성
  -이미지 오브젝트에 크로스헤어이미지 넣기
  -크기조절

  -카메라에서 광선을 발사하여 조절 , 플레이어 카메라를 달고있는 오브젝트에 스크립트 넣기.
  -스크립트 제작

(선언)
private Transform tr;
private Ray ray; // 광선
private RaycastHit hit; // 광선관련 구조체 : 오브젝트가 관선에 맞았는지 판별한다.
private float dist = 20f;
public CrossHair Chr;

(start)
tr = GetComponent<Transform>();
Chr = GameObject.Find("Canvas-UI").transform.GetChild(3).GetComponent<CrossHair>();
// 하이라키 안에있는 Canvas-UI를 찾고 그 오브젝트에 속한 인덱스가 3인 자식 오브젝트를 찾는다. 그 오브젝트의 CrossHair컴포넌트를 얻는다.

(update)
ray = new Ray(tr.position, tr.forward); //동적 할당 하자마자 발사 위치와 방향, 거리를 지정했음.
//            발사 위치 , 방향 forward
Debug.DrawRay(ray.origin, ray.direction * dist, Color.green);//씬화면에서 광선이 보이게 테스트용으로 디버깅.
//            발사 위치,  방향   * 거리(20) ,  보이는 컬러   (방향과 거리를 곱하면 velocity가 된다.)

  -스켈레톤에 레이어 추가 (자식까지 전부 체인지)
  -스크립트에 코드 추가

(update에 추가)

if (Physics.Raycast(ray, out hit, dist, 1<<6|1<<7|1<<8)) //1<<6은 비트 연산자를 사용하여 판별 가능. (6,7,8레이어 모두 감지)
{//광선을 쏘았을 때 적이 맞았는지 (광선이 위에서 일정 범위 감지중, 충돌 오브젝트 위치 값, 감지 범위, 적 판별)
            Chr.isGaze = true;
}
else // 광선에 맞지 않았다면
{
            Chr.isGaze = false;
}

  -크로스헤어 스크립트 만들어서 크로스헤어에 적용
  -코드 작성(크로스헤어 조절하는 코드)

(선언)
Transform tr; //지정하지 않아도 private로 저장
public Image crossHair;

float startTime; //크로스헤어가 커지기 시작한 시간을 저장
float duration = 0.25f; //크로스헤어가 커지는 속도 
float minSize = 0.6f; //크로스헤어 최소크기
float maxSize = 1.2f; //크로스헤어 최대크기
public bool isGaze = false; // 응시중인지 확인하는 변수

Color originColor = new Color(1f, 1f, 1f, 0.8f); //색지정, 흰색, 투명도 0.8, 크로스헤어 초기색
Color gazeColor = Color.red; // 적 응시중일 때 크로스헤어 빨간색으로 지정

(start)
 tr = transform;
 crossHair = GetComponent<Image>();
 startTime = Time.time;
 tr.localScale = Vector3.one * minSize; //초기 크기
 //localScale사용 이유 -> 부모의 속한 자식클래스인 크로스헤어가 독자적인 크기를 가지기 위해, Vector3.one은 xyz동일한 크기를 가지기 위해 
 crossHair.color = originColor;

(update)
 if (isGaze) //광선이 적을 주시중이라면
 {
     float time = (Time.time - startTime) / duration; // time  = 지난시간 / 0.25
     tr.localScale = Vector3.one * Mathf.Lerp(minSize,maxSize,time);//Mathf - 수학관련 기능/lerp(초기크기,변할크기,걸리는시간)
     crossHair.color = gazeColor;
 }
 else
 {
     tr.localScale = Vector3.one * minSize;
     crossHair.color = originColor;
     startTime = Time.time;
 }

3.

  -코드수정

4. 킬카운트 만들기

  -레거시 텍스트 오브젝트하나 만들기 (UI오브젝트 아래에)
  -위치랑 색상, 글자크기조정 / 컴포넌트 ui -> 이펙트 -> 아웃라인하면 외각선 생김.
  -게임 매니저 스크립트 수정

(추가 선언)

public static GameManager Instance;
public Text Killtxt;
public int Killcount = 0;


[C#]============================================================================

객체지향 프로그래밍 - 코드를 이용해서 모든 것을 객체로 표현하는것. (객체와 객체끼리의 상호작용을 코드로 표현)
객체 - 속성과 기능을 가진다. (데이터와 로직 / 변수와 매소드도 같은말)
         즉, 클래스는 틀이고 객체는 그 틀로 인하여 생성된 것이다. (객체 생성 = 인스턴스)

static이 선언된 함수 : 멤버함수가 아니기때문에 멤버 변수를 호출 할 수 없다.

생성자와 소멸자
  -생성자 : 객체의 생성을 담당한다. 클래스명과 같고 매소드의 일종이지만 반환형이 없다. 객체 생성과 동시에 초기화 시켜준다.
              오버로딩은 매개변수 갯수의 차이를 둔다. 생성자가 없어도 void 생성자는 호출된다.
              하지만 void생성자 없이 매개변수가 있는 생성자를 만들면 void생성자를 사용하려면 따로 선언해 주어야 한다. 

  -소멸자 : 객체의 소멸을 담당한다.  같은 클래스의 생성자에서 생성한 것은 반드시 같은 클래스의 소멸자에서 소멸이 원칙이다.
              클래스명 앞에 ~를 붙이는 걸로 생성, 매개변수는 없다. (C#에의 가비지 컬렉터가 자동으로 객체를 삭제.)

              =>메모리수거는 가비지 컬렉터가 담당하므로 소멸자에 대하여 신경 쓰지 않아도 된다.

엑세스 한정자
 -public : 접근 허용 클래스
 -private : 접근 불가 클래스
 -internal : 프로그램 내에서만 접근 가능 클래스
 -avstract : 추상클래스 
 -sealed : 봉인클래스


 