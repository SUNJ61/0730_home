유니티 개발 세팅

3D Render Pipeline

edit -> project setting

edit -> preferences -> external Tools 비쥬얼스튜디오 확인, 깔린것들 확인

layout -> 2 by 3 (필요에따라 바꾸기)

project -> one layout

비주얼스튜디오 C#/윈도우/콘솔을 선택후 .NET이 있는걸 선택.

*[솔루션]이라는 큰 범위에 다양한 [프로젝트]가 구성이됨. 즉, 솔루션은 프로젝트를 묶는 단위

솔류션 속성에서 여러개 시작 프로젝트 선택 후 원하는 프로젝트를 시작으로 바꾸면 동시에 실행 가능.

단축키
ctrl + ; -> 솔루션창 키기

드래그후 ctrl + k + c -> 주석
드래그후 ctrl + k + u -> 주석제거
*c+w+tap ->  WriteLine

===========================

public -> 공공의 -> 외부에서 접근 가능
class -> 관련된 변수, 함수의 묶음

class내 함수 start, update-> event함수 -> 스타트는 게임 시작전 설정, 업데이트 게임 시작후 계속 변화하게될 함수

유니티의 프로젝트의 에셋을 이용해 하이라키의 물체들을 조정

빌드 -> 컴파일러는 작성한 명령어(C#)를 컴파일을 한다.(유니티에 전달하기 위해 해석함.) -> 작성한 명령어를 해석하여 유니티한테 전달.

*컴파일러 : 작성한 프로그래밍 코드를 해석하여 하드웨어에 전달.
*컴파일 : 코드를 해석하는 과정.

.NET -> C#에 필요한 기능을 모아둔 것.

*.NET Framework-> 여러 플랫폼과 좋은 호환성을 가진다. / C#으로 코딩을 도와주는 기능이 모여있다.

using -> 뒤에 오는 기능을 사용한다. (명령어 앞에 해당 기능 단어 생략 가능.)
Ex) static System.console = 키워드 한정자(정적할당) class.메서드 순으로 작성됨. = 해당 클래스의 하나의 기능을 활성화 시킴.
namespace -> class를 담을 수 있다. (이름이 다른 namespce면 같은 클래스를 둘다 포함할 수 있다. 즉, 협업자들끼리 다른 namespce를 사용하면 서로의 간섭없이 코딩 가능.)
main -> 프로그램의 진입점.

WriteLine -> 콘솔창에 글자나 숫자를 띄워주는 기능을 가진 함수(메소드)
*;(세미클론) -> 명령이 끝났다는 것을 컴파일러에게 알려주는것

런타임 (ctrl + F5) -> 작동시 실행 파일 생성 -> 위치는 해당 프로젝트 파일내 bin 파일내 exe파일.

*\n ->1줄 줄바꿈 표시, 여러번 쓰면 여러번 줄바꿈 가능.