==============================================================================
[유니티 기타지식]
Quaternion : 유니티에서 회전을 나타내는 타입. 4개의 인자를 가지고 있음. (x,y,z,w : 복소수/ 회전을 나타냄)

position : 유니티 인스펙터 트랜스폼에 컴퍼넌트 rotation은 vector3(3차원으)로 x,y,z의 데이터를 받는다.
rotation : 유니티 인스펙터 창에서 vector3로 다룰수있도록 배려를 한 것, 사실은 rotation은 스크립트에서는
             quatnion타입을 사용해야한다. 즉, 유니티 상에서는 3차원 좌표값을 받고 회전을 할 수 있도록 도움을 준다.

quaternion.Slerp : 곡면 보간회전 함수. (원형으로 회전)
[preview]========================================================================
1. 몹이 플레이어를 바라보지 않고 어택하는 경우 수정

2. 플레이어 hp바 만들고 몹이 공격하면 피닳게 하는 기능 제작

[제작]===========================================================================

1.

  -스크립트 추가
(어택을 관리하는 if문 안에 추가)

Quaternion rot = Quaternion.LookRotation(Player.position - thisMonster.position); //플레이어가 있는 방향 정보를 저장
//Quaternion rot = Quaternion.FromToRotation(Skel.position, Player.position); // 

//thisMonster.rotation = rot; // 위에서 얻은 데이터를 토대로 몹 회전, 확확 돌아가서 아래 명령어 사용
thisMonster.rotation = Quaternion.Slerp(thisMonster.rotation, rot, Time.deltaTime * 3.0f);
// 부드럽게 회전하는 함수,                 (입력된 로테이션 방향, 바꿀 방향 , 주어진 시간만큼)

2.

  -캔버스 생성, (플레이어는 화면을 가리는 ui이므로 스크린 스페이스 오버레이로 해야함.)
  -캔버스 스케일 1920*1080만들기 (해상도에 맞춰서)
  -캔버스 안에 이미지 ui생성 크기랑 위치 조절하기
  -만든 ui하나 복사하기 (줄어드는 hp bar가 될것이다.)
  -복사한 ui에 hpbar이미지 넣기
  -복사한 ui 타입 filled로 변경, 채우는 방식 호라이즌으로 변경
  -text ui 만들기
  -크기랑 위치 맞추기
  -글자 크기가 클때는 오버 플로우 탭 2개를 둘다 오버플로우로 만든다.
  -스크립트 만들어서 player에 넣기

(선언)
public Image HpBar;
public Text HpText;
private int initHP = 0;
private int Maxhp = 100;

(start)
initHP = Maxhp;
HpText.color = Color.green;
HpText.text = $"HP : <color=#FF0000>{initHP.ToString()}</color>";

#칼에 맞았을 때 피 닳기.

  -때리는 오브젝트에 박스 오브젝트 만들기.
  -때리는 오브젝트 앞 히트 박스 만들기
  -머터리얼 붉은색으로 바꾸기
  -is트리거 설정 -> 박스 콜라이더 끄기, 메쉬 랜더러 끄기 (통과 할때 감지 = 내려칠 때를 감지하여 둘다 키기)
  -때리는 오브젝트의 어택 애니메이션을 찾아서 복사하여 이름을 바꾼다. (해당 애니메이션 수정할 예정)
  -때리는 오브젝트를 선택하고 window -> 애니메이션을 키고 복사한 애니메이션이 수정 가능해진지 확인
  -스크립트 수정 (발사체, 데미지 감지 스크립트)

(선언 추가)
public BoxCollider boxCol;
public MeshRenderer meshRender;

(함수 추가)
public void BoxColEnable()
{
    boxCol.enabled= true;
    meshRender.enabled = true;
}
public void BoxColDisable()
{
    boxCol.enabled = false;
    meshRender.enabled = false;
}
  -오브젝트 window -> 애니메이션 가서 때리는 모션 때 add 이벤트
  -박스 콜라이더 키기, 랜더러 키기 함수 불러오기
  -마찬 가지로 때리는 모션이 끝났을 때 모두 끄는 함수 불러오기 

[C#]============================================================================

ref : 주소 값 전달을 위한 것이다. (포인터와 같은 역할)
      주소는 전역에 영향을 끼쳐 다른 매서드에서 바뀌어도 메인에 영향을 준다.

ref 선언 방법
ref (자료형) 변수명 = 다른 변수

ref로 매개변수를 넘기는 경우 메소드가 해당 변수의 결과를 저장하지 않아도 컴파일러가 경고를 하지 않는다.
-> return으로 전달해도 된다.

static void Divide(int a, int b,ref int c, ref int d)와 같이 선언된 함수를 불러오는 방법
Divide(a, b,ref c,ref d);와 같이 호춯한다.

다른 클래스에서 보호 되고 있는 변수의 주소값을 받을 수 있다면.
주소의 속한 값을 변경하여 보호되고 있는 변수의 값을 변경할 수 있다.


out : 매개변수로 넘길 때 해당 메서드가 결과를 저장하지 않으면 컴파일러가 에러 메세지를 출력한다.
->return으로 전달하려면 다른 변수에 저장해야한다. => 즉, 저장을 확인해 줌으로써 ref보다 더 많이 사용한다.

static void Divide_out(int a, int b, out int c, out int d)과 같이 선언된 함수를 불러오는 방법
Divide_out(a, b, out c, out d);와 같이 호출한다.

열거형 만들기 (가독성을 위하여 선언한다.)
enum 열거형이름
{
 변수선언 = 기본값,
 변수선언 = 기본값,
 .
 .
 .
 변수선언 = 기본값
}

기본값은 열거형 인덱스이며, 지정해서 인덱스를 바꿀 수 있다. (기본은 0,1,2,3...)

params는 입력 받는 길이를 예측하지 못할 때 자료형 앞에 붙여 쓴다.
단, 입력 받는 자료형이 모두 같아야 한다.

로컬함수
-로컬 함수는 매소드 안에서 선언되고 매소드 안에서 사용되는 특별한함수.
-클래스 멤버가 아니기 때문에 매소드가 아니라 함수라고 부른다.
-같은 매소드안에 같은 기능이 반복적으로 연계되었을 경우 사용한다.