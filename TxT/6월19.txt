이진 표현에서 가장 앞 비트는 양수, 음수를 나타냄.
양수는 1, 음수는 0이다. (양수, 음수표현 자리수를 초과하는 값은 버린다. -> 10 이면 0이됨.)
이진 표현에서 양수 <-> 음수 변경은 (보수 +1)의 값을 가진다. (더하면 0이되어야 하기 때문.)

비트연산자 : &, |, !, ^, ~
비트 단위로 연산 하는 방법이다.
& : 비교하는 비트자리수가 둘다 1이여야지만 1을 반환, 나머지는 0
| : 비교하는 비트자리수 중 하나라도 1이면 1을 반환, 둘다 0일경우 0반환
^ : 비교하는 비트자리수가 서로 같으면 0, 다르면 1 반환
! : 비트의 보수(역)를 취한다. (양수 -> 양수) -> 부호 비트는 반전 x
~ : 모든 비트를 반전한다. (양수 <-> 음수) -> 부호 비트까지 반전

시프트 연산자 : >>, <<
<< : 왼쪽 쉬프트는 변수값 곱하기 2의 거듭제곱이 된다. 왼쪽으로 비트 이동
>> : 오른쪽 쉬프트는 변수값 나누기 2의 거듭제곱이 된다. 오른쪽으로 비트 이동
#자료형의 크기를 초과하여 쉬프트 하는 경우 초과되는 비트는 사라진다.

size of 연산자 : 데이터 형식의 크기를 구한다. (차지하는 메모리를 보여줌)
-> class나 구조체도 넣을 수 있다. (메모리를 차지하는 양을 볼 수있음)

순차문 -> 위에서부터 아래로 차례로 실행하는 구문.

조건문 -> 조건에 맞는 구문만 실행하게 한다.
*if와 else if의 차이
if문으로만 쓰인 구문은 모든 조건을 검사하고 그에 해당하는 결과를 모두 출력한다.
else if는 조건에 해당되는 구문이 나오면 다른 조건문을 검사하지 않고 해당 결과만 출력한다.

swith문 ->설정한 변수의 case의 결과를 도출.
#조건이 복잡하면 if문이 편하고 조건이 간단하면 swith문이 편하다.
