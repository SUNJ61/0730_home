interpolate - 보간, 이는 적용된 물체의 충돌을 부드럽게 해준다.
extrapolate - 충돌을 부드럽게 하는것은 같지만 이것은 충돌을 예측하여 계산. 즉, 메모리를 더 차지하며 부정확함.

연계동작은 블렌드 트리를 사용하는 것이 좋다.
====================================================================
3인칭 캐릭터 제작

 - 캐릭터 애니메이션 연결
 - 점프, 달리기, 공격
====================================================================

1. 리깃바디와 캡슐콜라이더 적용하고 수치 조정

2. 캐릭터 오브젝트 이동에 정규화와 최적화가 안된 코드 수정

(정규화와 최적화가 안된 코드)
tr.Translate(Vector3.right * h * Time.deltaTime * moveSpeed);
{
    animator.SetFloat("PosX", h , 0.01f, Time.deltaTime);
}
tr.Translate(Vector3.forward * v * Time.deltaTime * moveSpeed);
{
    animator.SetFloat("PosY", v, 0.01f, Time.deltaTime);
}

(수정)

Vector3 moveDir = (Vector3.right * h) + (Vector3.forward * v); //방향 정보를 계산하여 저장하는 코드 
tr.Translate(moveDir.normalized * moveSpeed * Time.deltaTime); // 방향 정보와 속도를 곱하여 위치정보에 적용 
{
    animator.SetFloat("PosX", h, 0.01f, Time.deltaTime);
    animator.SetFloat("PosY", v, 0.01f, Time.deltaTime);
}

3. 달리기 제작

 - 애니메이션에 스프린트 만들어서 불변수로 연결하기

if (Input.GetKey(KeyCode.LeftShift) && Input.GetKey(KeyCode.W))
{
    moveSpeed = 14.0f;
    animator.SetBool(isSprint, true);
}
else if (Input.GetKeyUp(KeyCode.LeftShift) || Input.GetKeyUp(KeyCode.W))
{
    moveSpeed = 7.0f;
    animator.SetBool(isSprint, false);
}

4. 점프 제작 (가만히 있을 때, 달릴 때)

 #가만히 있을 때 점프
  - 점프 애니메이션을 트리거로 연결, 돌아오는 걸 지정하지 않으면 (has exit time)일정 시간후에 다시 원상태로 돌아옴
  - 가져온 점프 애니메이션에 점프높이, 점프 연속성 제한등 이미 코딩이 되어있어 생략
  - 코드 수정

if (Input.GetKeyDown(KeyCode.Space) && h == 0 && v == 0) // 위치 이동값이 없고 스페이스 입력이 있을 때만 점프
{
    animator.SetTrigger(IdleJump);
}

 #이동 중 점프
  -트리거로 연결
  -코드 수정

if (Input.GetKeyDown(KeyCode.Space) && v > 0.1f) // v > 0.1f은 w를 눌렀을 때 감지
{
    animator.SetTrigger(MovingJump);
}

5. 공격 애니메이션 & 공격중 가만히 있기

  -트리거로 연결, 애니메이션에 이벤트 함수 추가하여 끝날 때 bool변수 바꾸기 (anystate에서 어택 아이들로 연결)
  -코드수정

 if (Input.GetMouseButton(0) && !isAttack)
 {
     animator.SetTrigger(Attack);
     isAttack = true;
 }

  -bool변수 제어용 함수 추가

public void OnAttack()
{
    isAttack = false;
}

===============================================================================
2D 모바일 게임 만들기 preview
===============================================================================

1. 유니티에 2D로 프로젝트 만들기
 -스탠다드 에셋에 2D 자료들을 이용할 예정이다.

[C#]=============================================================================

#이전에 했던 것들

클래스 내부에 존재하는 것들
 -멤버 변수 : 멤버필드에 선언된 변수
 -생성자
 -info 매소드 : 생성자와 소멸자 사이에서 멤버필드에 선언된 변수 데이터와 관련된 매소드들을 저장 및 수정함
 -소멸자

this와 this생성자
 
#오늘 한 것

<클래스 상속>

 -클래스의 내용을 상속시켜 사용했던 코드들을 재활용 할 수 있다.
 -확장성을 가진다. 한개의 부모클래스로 여러개의 자식클래스를 만들어 불필요한 코드 삭제.
 -프로젝트가 늘어나거나 확장되는 경우에 상속을 활용하여 코드를 최적화 한다.

 -자식클래스는 반드시 부모클래스 생성자를 호출 하여서 초기화 해야한다.
 -부모클래스는 자식클래스에게 무조건적으로 상속을 하지 않는다. 작성자가 의도하지 않은 상속이나 자식클래스의 구현을
  막기위해 상속이 불가능한 클래스를 선언할 수 있다. 이때 sealed한정자를 이용한다.

(실행예시)
1. 자식클래스에 매개변수 2개 입력하여 객체 생성
2. (Derived(string Name, int PhoneNum) : base(Name,PhoneNum))호출
3. 부모 클래스 Base(string Name, int PhoneNum) : this(Name)호출.
4. this생성자가 Base(string Name) 호출.
5. Base(string Name) 생성자 실행
6. Base(string Name, int PhoneNum) 생성자 실행
7. public Derived(string Name, int PhoneNum) 실행

 => 자식클래스를 호출 할 경우 부모클래스와 자식클래스 모두 호출된다. 생성자의 호출 순서는 부모클래스 실행 후 자식클래스,
      소멸자의 호출 순서는 자식클래스 후 부모클래스이다. 이는 스택 구조 때문이다.
      데이터를 들어온 순서대로 쌓고 가장 나중에 들어온 데이터부터 삭제하기 때문이다.

<클래스 사이 형식 변환 (is, as)>
 -is : 객체가 해당 형식을 검사하여 같은 클래스 특성을 가지는지 판별하여 해당 결과를 bool값으로 변환
 -as : 형식변환자 같은 역할을 한다. 다만 형식변환자는 변환에 실패하면 예외를 던지고, as는 객체참조를 null로 만든다.

(is예시)
 Mammal mammal = new Dog(); //mammal은 Mammal의 객체, mammal은 Dog의 특성을 가진다.
 Dog dog; //Dog클래스의 객체 생성.
 if(mammal is Dog) // mammal은 Dog클래스의 특성을 가지기 때문에 true

(as예시)
 Mammal mammal1 = new Cat(); //mammal1이라는 객체 생성, mammal1은 Cat의 특성을 가진다. (Mammal 클래스에 속함)
 Cat cat = mammal1 as Cat; //Cat클래스 객체는 이전 mammal1의 객체를 Cat으로 형변환 한 특징을 가진다.
 if(cat != null) // mammal1은 Cat의 특성을 가지고 있기 때문에 형변환 가능. 

 Cat cat2 = mammal as Cat; //cat2객체는 mammal의 객체를 Cat클래스로 형변환한 특징을 가진다.
 if(cat2 != null) //mammal은 Dog의 특징을 가져서 형변환 불가능 (null이 대입됨.)

<클래스의 오버라이딩과 다형성>
 -virtual : 부모클래스 매소드 앞에 선언되며, 자식클래스에서 오버라이딩 될 매소드임을 알려주는 지시자.
 -override : 자식클래스 매소드 앞에 선언되며, 부모클래스에 매소드를 오버라이딩 함을 알려주는 지시자.

 -다형성 : 부모 자식간에 오버로딩된 함수가 제각각 다른 기능을 가지게 되는것.

<매소드 숨기기>
 -매소드 숨기기 : 부모클래스에서 구현된 버전의 매소드를 감추고 자식클래스에서 구현된 버전만 보여주는 것이다.
                      즉, 자식클래스에서 오버라이딩 된 매소드만 보여준다.

<읽기 전용 필드>
 -readOnly : 클래스 생성자에서만 수정이 가능하다. 다른 곳에서는 수정이 불가능하다. (읽기는 가능)
                사용이유 -> private는 생성자가 아니여도 초기화 가능하기 때문에 생성자 이외의 값에서 초기화 방지

<중첩 클래스>
 -클래스 안에 클래스가 들어있는 것을 중첩 클래스라 한다.
  ->클래스 외부에 공개하고 싶지않은 형식을 만들 때 (즉, 클래스 내부에서 공개 불가능한 정보를 가리기 위해 사용.)
  ->현재 클래스의 일부분 처럼 표현할 수 있는 클래스를 만들고자 할 때
  ->내부에 선언된 중첩클래스는 외부 클래스의 private멤버에도 접근할 수 있다. 즉, 은닉성을 무너뜨린다.
     하지만 프로그래머에게 유연한 표현력을 가져다 준다는 장점이 있다.

<분할 클래스>
 -같은 클래스를 여러번 나눠서 구현란 클래스를 말한다. (키워드는 partial을 사용한다.)
  ->같은 내용스페이스에 같은 이름의 클래스를 여러번 선언이 가능하고 기능이 이어진다.
     분할된 클래스에서는 이름이 같은 매소드 선언 불가.

<확장 매소드> (Extension Method)
 -기존 클래스의 기능을 확장하는 기법
 -부모클래스를 물려받아 자식클래스를 만든 뒤 자식클래스에서 기능을 추가하는 상속과는 다르다.

<클래스와 구조체의 차이>

########클래스###################구조체######################
키워드     class                                   struct
형식       참조형식                               값형식
복사       얕은복사                               깊은복사
인스턴스  new연산자와 생성자 필요           선언만으로 생성
생성자     매개변수 없는 생성자 선언가능    매개변수 없는 생성자 선언 불가능
상속       가능                                     값형식으므로 상속 불가능
목적       실세계를 추상화 하려함.             데이터를 담기 위한 목적의 자료구조     