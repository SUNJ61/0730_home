-싱글게임은 프리팹을 사용한다.
-멀티 게임은 Resources를 사용하여 로드 (Resources는 네트워크 상에 프리팹 폴더라고 보면된다.)


-오브젝트에 레이어를 설정하여 메인 카메라가 보고 싶은 레이어만 볼수 있도록 설정가능.
-에딧에 프로젝트 세팅에 physics탭에 맨아래에 레이어끼리 충돌 가능 여부를 설정할 수 있다.
  여기서 PLAYER와 BULLET의 교차지점을 체크해제한다.
  이는 PLAYER와 BULLET은 서로 충돌을 감지하지 않는다.
  마찬가지이유로 PLAYER와 총알이 박히는 이펙트레이어의 교차지점을 체크해제한다.

-floor오브젝트에서 메쉬 렌더러에 light shadows는 해당 오브젝트가 그림자를 만들지 선택(모바일은 체크해제)

-하이라키 안에 같은 이름의 오브젝트가 있으면 오류 발생

-스크립트 컴파일과 어셈블리 정의 파일 : C#스크립트를 컴파일 할 때 어셈블리가 이를 기계어로 해석하여 컴퓨터로 전달.
 스크립트가 너무 많아질 경우 컴파일이 오래걸림 이를 해결하기위해 기능을 모아 지역화 시킨다.
 >같은 기능을 하는 스크립트를 폴더에 모으고 그안에 어셈블리데피니션 파일 생성
 >다른 공간의 스크립트를 불러오면 오류 발생, 이를 해결하려면 다른 공간을 참조하는 어셈블리파일을 클릭하여
   다른 공간의 어셈블리파일을 불러오라고 추가 시키면 오류가 나지 않는다. (어셈블리 데피니션 리퍼런스에 추가)

-파일 확장자 dll : 윈도우 운영체제에서 같은 기능의 코드를 모아 실행하는 도서관 같은 역할을 한다.
==================================================================================
오늘 할 것

1. 몬스터 패트롤 기능 구현, 상태는 walk
2. 몬스터가 패트롤 하다가 플레이어를 발견하면 뛰어오기, 상태는 run
   -property기능을 사용
3. 메카님 방식으로 총발사, 리로드 모션 구현 (Avatar를 만들어서 구현할 예정)
4. 적이 Damage를 입어 사망, 사망할 때 애니메이션은 랜덤하게 진행되는 것을 구현
5. 오브젝트 풀링으로 여러마리 태어나게 만들기
===================================================================================

1. 몬스터 패트롤 기능 구현
  -enemy 모델 올리기 ,태그와 레이어 적용하기
  -애니메이터를 만들고 모델에 적용시키기
  -LOD 그룹 컴퍼넌트 추가 (LOD = load of detail) : 카메라에서 멀어지면 해상도를 낮추고, 가까우면 해상도를 높인다.
   cross fade : 서서히 바뀜
   speed tree : 확 바뀜     // 플레이어도 추가하기
  -옵티마이즈 게임 오브젝트 체크 해제(오브젝트의 모든 뼈대 들이 보여짐)
   이 기능을 체크하고 Extra Transforms to Expose에서 원하는 뼈대만 보이게 할 수 있다. (오브젝트 최적화)

  -웨폰 숄더에 웨폰 장작, 파이어포스 오브젝트 붙이기.

  -애니메이터에 애니메이션 넣기 (idle ,  walk), bool파라미터 추가 ,노드 연결
  -nav mesh추가, 속도 1.5로 낮추기 (초기는 걷기만 하므로 1.5 / 캐릭터가 공중을 걷는가면 base offset을 조정)
  -auto braking 체크 해제, 거리가 가까워지면 속도가 줄어드는 옵션

  -패키지 매니저에서 유니티 레지스토리에 AI Navigation을 설치한다.
  -윈도우 ai - > 네비게이션 오브솔라이트 선택, floor오브젝트를 눌러서 네비게이션 스테틱을 체크
   네비게이션 에어리어를 워크에이블 택(걸을수 있는곳은 다 ai가 이동할 수 있도록함)
  -네비게이션 오브솔라이트에 bake탭에서 bake클릭 (ai가 다닐수 있는 공간 업로드)

  -정찰 지점 (패트롤 지점을 만든다.)
  -스테이지 오브젝트 아래에 빈오브젝트 만들기 (해당 오브젝트 선택후 쉬프트 + 알트 + n => 자동 빈오브젝트 생성)
  -에너미가 지나갈 포인트 여러개 만들기
  -에너미에게 스크립트 적용, 애니메이션은 따로 만든다.

####패트롤 스크립트
public List<Transform> wayPointList; //정찰지점 포인트를 담기위한 인덱스
private NavMeshAgent agent;

private readonly string WayPointStr = "WayPointGroup";

public int nexIdx = 0; //다음 정찰지점 포인트의 인덱스 값 저장

void Start()
{//Find계열 함수는 느려서 시작전에 실행
    var group = GameObject.Find(WayPointStr); //하이라키에 있는 WayPointGroup을 찾아서 대입
    if (group != null)//유효성 검사, group을 읽어왔는지 검사
    {
        group.GetComponentsInChildren<Transform>(wayPointList); //WayPointGroup안에 자식들을 리스트에 저장
        wayPointList.RemoveAt(0);// WayPointGroup이라는 오브젝트가 0번에 저장되므로 삭제
    }

    agent = GetComponent<NavMeshAgent>();
    agent.autoBraking = false; //가까워지면 감속기능 off
}

void Update()
{
    //float dist = Vector3.Distance(transform.position, wayPointList[nexIdx].position); //두 오브젝트 사이의 거리
    //float dist = (wayPointList[nexIdx].position - transform.position).magnitude;//두 오브젝트 사이 거리, 둘다 if조건과 동일
    if (agent.remainingDistance <= 0.5f) //추격중인 지점과의 거리가 0.5보다 작거나 같다면
    {
        nexIdx = ++nexIdx % wayPointList.Count; //인덱스가 계속 증가하더라도 나머지가 0~10사이로 결정되어 0~10사이 값 대입.
        MoveWayPoint();
    }
}

private void MoveWayPoint()
{
    if (agent.isPathStale) return; //최단 경로 계산이 끝나지 않고 길을 잃어버린 경우 강제로 종료.

    agent.destination = wayPointList[nexIdx].position;//다음 정찰지점까지 추격한다.
    agent.isStopped = false;
}

 -애니메이션 구현용 스크립트를 만들어 에너미 모델이 붙인다.



 -애니메이션에서 블렌드 트리를 만든다. 1차원 블렌드 트리에 앞으로 걷기, 앞으로 뛰기 2개를 넣는다.
 -각각의 속도를 1.5 3.5로 설정한다.
 -idle과 블렌드 트리를 연결한다. 기존 walk는 삭제



 -fire애니메이션 state만들고 fire_SMG넣기